<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cqrs on Lorenzo Arribas</title>
    <link>https://larribas.me/tags/cqrs/</link>
    <description>Recent content in cqrs on Lorenzo Arribas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://larribas.me/tags/cqrs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Colmena, an Architecture for Highly-Scalable Web Services</title>
      <subtitle>We ditched MVC frameworks and designed our own architecture, combining ideas like Event Sourcing, CQRS &amp; Hexagonal. Here&#39;s what we learned.</subtitle>
      <link>https://larribas.me/posts/colmena-an-architecture-for-highly-scalable-web-services/</link>
      <pubDate>Tue, 06 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://larribas.me/posts/colmena-an-architecture-for-highly-scalable-web-services/</guid>
      <description>&lt;p&gt;About 3 years ago, our startup pivoted from a Q&amp;amp;A app for doctors to an education platform (which we named &lt;a href=&#34;https://schoolhouse.io/en/&#34;&gt;SchoolHouse.io&lt;/a&gt;). It was a big product shift, and we knew many technical changes would follow.&lt;/p&gt;
&lt;p&gt;At the time, we had a 1-year-old Python+Django codebase that was &lt;em&gt;already&lt;/em&gt; getting rusty and hard to maintain. How did we cross the legacy line so fast?&lt;/p&gt;
&lt;p&gt;(sigh)&lt;/p&gt;
&lt;p&gt;We were clearly doing something wrong, and we wanted to understand &lt;em&gt;what&lt;/em&gt;, so we made a list of our &lt;strong&gt;main pain points&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To understand how a feature worked, we needed to jump a lot between our code and the framework&amp;rsquo;s, sometimes through long inheritance hierarchies, decorators, hooks and conventions documented somewhere. Thus, every time we needed to trace a bug or make a change we needed to put on our Indiana Jones hat.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It wasn&amp;rsquo;t obvious where many changes (like some permissions, relationships or validations) belonged. This generated a lot of interesting but ultimately time-wasting debates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unit tests were ridden with stubs and mocks, and when they weren&amp;rsquo;t, they had to be busy understanding HTTP parameters or making sure the database was clean.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;figure&gt;
    

    

    &lt;img
        src=&#34;https://larribas.me/posts/colmena-an-architecture-for-highly-scalable-web-services/images/dry.jpg&#34;
        alt=&#34;We&amp;#39;re good. This framework is DRY&#34;
        
    &gt;

    

    &lt;figcaption&gt;We tried to be DRY, but working on our codebase felt like drowning.&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;h2 id=&#34;we-ditched-mvc-frameworks-and-did-it-our-way&#34;&gt;We ditched MVC frameworks and did it our way&lt;/h2&gt;
&lt;p&gt;Those issues made us unproductive and made our codebase messy over time.&lt;/p&gt;
&lt;p&gt;On top of that, we suspected we wouldn&amp;rsquo;t be able to solve our pain points if we kept using an MVC framework by the book, so we set out to &lt;strong&gt;design our own architecture&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, optimized for long-term productivity and maintainability&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;-so-was-it-worth-it&#34;&gt;&amp;hellip; So, was it worth it?&lt;/h2&gt;
&lt;p&gt;3 years later, we&amp;rsquo;ve seen our product change A LOT, fell in love with functional languages like Elm and Haskell, and went beyond full-stack, taking care of graphic design, frontend engineering, system administration, and data science. And despite all these changes, we believe something extraordinary has happened: &lt;strong&gt;We are as comfortable with our backend as the first day (no large refactors!).&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Our architectural choices have consistently made our lives easier, and now we&amp;rsquo;d like to share what we&amp;rsquo;ve learned with the community. We&amp;rsquo;ve also published &lt;a href=&#34;https://github.com/schoolhouse-io/colmena-realworld-example-app&#34;&gt;an implementation of the RealWorld spec&lt;/a&gt; to provide realistic code examples&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2 id=&#34;ok-im-listening-what-is-it-about&#34;&gt;OK. I&amp;rsquo;m listening. What is it about?&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;Colmena&lt;/em&gt; app is composed of multiple cells.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cells are self-contained services&lt;/strong&gt; that follow the &lt;a href=&#34;https://fideloper.com/hexagonal-architecture&#34;&gt;hexagonal architecture&lt;/a&gt;. Each cell:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Has a clear purpose and responsibility.&lt;/li&gt;
&lt;li&gt;Has some internal domain that represents, validates and transforms the cell&amp;rsquo;s state.&lt;/li&gt;
&lt;li&gt;Relies on a series of interfaces to receive input from (and send output to) external services and technologies.&lt;/li&gt;
&lt;li&gt;Exposes a public API (a contract stating what it can do).&lt;/li&gt;
&lt;/ol&gt;


&lt;figure&gt;
    

    

    &lt;img
        src=&#34;https://larribas.me/posts/colmena-an-architecture-for-highly-scalable-web-services/images/basic_cell.png&#34;
        alt=&#34;A basic authentication cell exposes operations to create new credentials, check them and update them. It also needs to communicate with an Oauth service and a database.&#34;
        
    &gt;

    

    
&lt;/figure&gt;


&lt;p&gt;You can think of cells as &lt;strong&gt;very small microservices&lt;/strong&gt;. In fact, we encourage you to try to make your cells as small as possible. In our experience, granulating your domain around entities and relationships helps you understand, test and maintain the codebase in the long run. These are the cells of the &lt;a href=&#34;https://github.com/schoolhouse-io/colmena-realworld-example-app&#34;&gt;RealWorld backend&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;user&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;auth&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;follow&lt;/strong&gt; (user)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;article&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tag&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;comment&lt;/strong&gt; (article)&lt;/li&gt;
&lt;li&gt;(article) &lt;strong&gt;feed&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we told you our app is a blogging platform, the purpose of each cell becomes pretty clear. It would only take a glance at the &lt;a href=&#34;https://github.com/schoolhouse-io/colmena-realworld-example-app/tree/master/lib/real_world&#34;&gt;&lt;code&gt;lib/real_world&lt;/code&gt; directory&lt;/a&gt; to find out where a certain feature might be defined. From there, a developer can quickly look at the API to learn about the operations it supports and navigate the implementation in a very gradual and natural way.&lt;/p&gt;
&lt;h3 id=&#34;an-event-based-functional-domain&#34;&gt;An event-based, functional domain&lt;/h3&gt;
&lt;p&gt;Each cell models a small domain. This domain may correspond to an entity (e.g. a user), a relationship (e.g. a user follows another), or a special feature (e.g. each user has their own materialized feed of articles).&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;Colmena&lt;/em&gt;, &lt;strong&gt;changes to the domain are represented as a sequence of events&lt;/strong&gt;. This sequence of events is append-only, as events are immutable (they are &lt;em&gt;facts&lt;/em&gt; that have already taken place). In &lt;a href=&#34;https://www.youtube.com/watch?v=8JKjvY4etTY&#34;&gt;event sourcing&lt;/a&gt;, this sequence is called a &amp;ldquo;Source of truth&amp;rdquo;, and it provides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An audit log of all the actions that have modified the domain.&lt;/li&gt;
&lt;li&gt;The ability for other components (in the same or different cells) to listen to certain events and react to them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The latter practice is commonly known as &lt;em&gt;event-driven&lt;/em&gt; or &lt;em&gt;reactive programming&lt;/em&gt;, and it has proven a really useful way to implement certain features with very low coupling.&lt;/p&gt;
&lt;p&gt;Moreover, since we have a sequence of immutable data, &lt;strong&gt;everything the domain does can be conceived as a pure function&lt;/strong&gt; (no side effects, just deterministic data transformations). In Ruby (or any other object-oriented language for that matter), this translates to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No classes, class instances, or methods.&lt;/li&gt;
&lt;li&gt;No calls to any external technology or service.&lt;/li&gt;
&lt;li&gt;No need for stubs, mocks, or any other test artifacts that make our tests slow or complicated.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;We can &lt;a href=&#34;https://github.com/schoolhouse-io/colmena-realworld-example-app/blob/master/lib/real_world/follow/domain.rb&#34;&gt;validate and describe our app&amp;rsquo;s behavior&lt;/a&gt; in a way that is both simple and very powerful, forgetting about the noise.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;figure&gt;
    

    

    &lt;img
        src=&#34;https://larribas.me/posts/colmena-an-architecture-for-highly-scalable-web-services/images/evented_domain.png&#34;
        alt=&#34;A functional, evented domain takes a current state (pure data), some arguments (pure data) and produces a deterministic output (pure data).&#34;
        
    &gt;

    

    
&lt;/figure&gt;


&lt;h3 id=&#34;a-public-contract&#34;&gt;A public contract&lt;/h3&gt;
&lt;p&gt;Every &lt;em&gt;useful&lt;/em&gt; application needs to let the world do something with it. We&amp;rsquo;ll continue with our RealWorld example.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;follow&lt;/code&gt; cell is there to fulfill a few use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A user follows another profile.&lt;/li&gt;
&lt;li&gt;A user stops following another profile.&lt;/li&gt;
&lt;li&gt;Someone wants to know whether a particular user follows a particular profile.&lt;/li&gt;
&lt;li&gt;Someone wants to know which profiles a user is following.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You&amp;rsquo;ll notice the first two use cases are actions that &lt;em&gt;may&lt;/em&gt; (if validation rules allow it) change the cell&amp;rsquo;s state, whereas the last two use cases are just querying the current state.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;Colmena&lt;/em&gt;, we call the former &lt;em&gt;commands&lt;/em&gt; and the latter &lt;em&gt;queries&lt;/em&gt;, and we deal with them in a slightly different way. This pattern is called &lt;a href=&#34;https://martinfowler.com/bliki/CQRS.html&#34;&gt;CQRS (command-query responsibility segregation)&lt;/a&gt;. The linked article does a very good job at explaining the pros and cons of this approach, so we&amp;rsquo;ll focus on our particular implementation for this RealWorld codebase:&lt;/p&gt;


&lt;figure&gt;
    

    

    &lt;img
        src=&#34;https://larribas.me/posts/colmena-an-architecture-for-highly-scalable-web-services/images/cqrs_sequence_diagram.png&#34;
        alt=&#34;A query reads from a database (which could be optimized for a particular kind of read operation), whereas a command might need to read from a database, find out what to do and store the changes, all of this within a transaction.&#34;
        
    &gt;

    

    
&lt;/figure&gt;


&lt;p&gt;It is extremely valuable for a project to &lt;strong&gt;make sure the contracts for all these public-facing components are properly documented and semantically versioned&lt;/strong&gt;. Developers need to be able to learn and trust, at any point:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What types of events does this cell publish? What data do they contain?&lt;/li&gt;
&lt;li&gt;Which are the arguments to this command? How about this query?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;keep-acid-properties-in-mind&#34;&gt;Keep ACID properties in mind&lt;/h3&gt;
&lt;p&gt;Given that this is a distributed architecture with many components and cells working separately, it&amp;rsquo;s fair to wonder&amp;hellip; Are changes atomic? How do we keep them consistent?&lt;/p&gt;
&lt;p&gt;When commands need to be atomic (they usually do), they are decorated by a transaction. This transaction is responsible for publishing the sequence of events the command generates and running the proper materializers. In turn, these &lt;strong&gt;materializers enforce consistency and integrity&lt;/strong&gt;. A materializer takes a sequence of events and propagates their changes to the several &amp;ldquo;read models&amp;rdquo; the queries use.&lt;/p&gt;
&lt;p&gt;For instance, the transaction in the previous diagram might call these materializers:&lt;/p&gt;


&lt;figure&gt;
    

    

    &lt;img
        src=&#34;https://larribas.me/posts/colmena-an-architecture-for-highly-scalable-web-services/images/materialization_diagram.png&#34;
        alt=&#34;A transaction makes sure the events are materialized in different ways.&#34;
        
    &gt;

    

    
&lt;/figure&gt;


&lt;p&gt;Let&amp;rsquo;s try with a second example as well. We&amp;rsquo;re dealing with &lt;em&gt;articles&lt;/em&gt; now. A materializer might get the following sequence of events:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;article_published(...)
article_tagged(...)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And perform the following operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Store the whole article in a document-oriented database (e.g. MongoDB) to optimize read operations.&lt;/li&gt;
&lt;li&gt;Store the article in a reverse index of &lt;code&gt;tag -&amp;gt; articles&lt;/code&gt; to fetch articles with certain tags.&lt;/li&gt;
&lt;li&gt;Store the article&amp;rsquo;s title and description in a database optimized for search (e.g. ElasticSearch).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some parts of this materialization process must happen synchronously (if consistency is a requirement). Others may happen asynchronously (when &lt;a href=&#34;http://guide.couchdb.org/draft/consistency.html&#34;&gt;eventual consistency&lt;/a&gt; is enough).&lt;/p&gt;
&lt;h3 id=&#34;rely-on-interfaces-not-concrete-implementations&#34;&gt;Rely on interfaces, not concrete implementations&lt;/h3&gt;
&lt;p&gt;At this point, our cell accepts requests from a potentially untrusted source, stores and retrieves data from a database, and may need to call other cells.&lt;/p&gt;
&lt;p&gt;These operations are the weak links of software development. The network can fail, databases can be corrupted and public APIs can&amp;rsquo;t be trusted. So, what can we do to minimize these risks?&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;Colmena&lt;/em&gt;, &lt;strong&gt;we define every input/output component as an interface (a port in the hexagonal jargon)&lt;/strong&gt;. A particular cell might rely on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;repository&lt;/code&gt; port, which persists and reads domain data.&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;event publisher&lt;/code&gt; port, which allows events to be made public.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;router&lt;/code&gt; port, which communicates with other cells.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Ruby, we specify the behavior these interfaces should satisfy with a &lt;a href=&#34;https://github.com/schoolhouse-io/colmena-realworld-example-app/blob/master/lib/real_world/follow/ports/repository/spec_shared_examples.rb&#34;&gt;shared example&lt;/a&gt;. All implementations (adapters in the hexagonal jargon) must comply with the spec if they are to be trusted, and provide explicit error handling so that risks can be gracefully handled, logged, and mitigated.&lt;/p&gt;
&lt;p&gt;Relying on interfaces is one of the most basic design principles, and it has immediate practical benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We can write a single test for multiple components.&lt;/li&gt;
&lt;li&gt;We can apply the &lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/234747/dependency-inversion-principle-vs-program-to-an-interface-not-an-implementatio&#34;&gt;dependency inversion principle&lt;/a&gt; to inject the adapters we need for each environment (e.g. a fast SQLite database for testing and a fully scalable cloud database in production).&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;We can switch to a different technology without changing our cell&amp;rsquo;s code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;your-application-is-made-up-of-multiple-cells&#34;&gt;Your application is made up of multiple cells&lt;/h3&gt;
&lt;p&gt;Cells have clearly defined boundaries, but they still need to communicate with one another. In &lt;em&gt;Colmena&lt;/em&gt;, cells can talk to each other in two different ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synchronously, invoking a command or query on the other cell. This is a traditional &lt;a href=&#34;https://en.wikipedia.org/wiki/Remote_procedure_call&#34;&gt;remote procedure call&lt;/a&gt; we perform through a &lt;a href=&#34;https://microservices.io/patterns/service-registry.html&#34;&gt;central service registry&lt;/a&gt; we call &lt;a href=&#34;https://github.com/schoolhouse-io/colmena-realworld-example-app/blob/master/lib/real_world/ports/router/in_memory.rb&#34;&gt;&lt;em&gt;the router&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Asynchronously, listening to events produced by the other cell and reacting to them. We do this through an &lt;a href=&#34;https://github.com/schoolhouse-io/colmena-realworld-example-app/blob/master/lib/real_world/ports/event_broker/in_memory.rb&#34;&gt;event broker&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;In our example app, both the router and event broker ports are implemented in-memory. The beauty of these interfaces is that they can be implemented by a service like RabbitMQ or Amazon Kinesis and connect cells deployed on different parts of the world; or even cells written in different programming languages!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are a few examples of how we glue cells together in this RealWorld service:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href=&#34;https://github.com/schoolhouse-io/colmena-realworld-example-app/blob/master/lib/real_world/tag/listeners/counter.rb&#34;&gt;counter listener&lt;/a&gt; reacts to tags being added to or removed from an article and it updates a total count on the times a tag has been used. All the while, the &lt;code&gt;article&lt;/code&gt; cell doesn&amp;rsquo;t even know the &lt;code&gt;tag&lt;/code&gt; cell exists.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;api&lt;/code&gt; cell is a bit special. It exposes some of the behavior of all cells in a RESTful HTTP API. As such, it needs to deal with authentication and authorization, hiding private data and aggregating several operations into &lt;a href=&#34;https://github.com/schoolhouse-io/colmena-realworld-example-app/blob/master/lib/real_world/api/commands/api_register.rb&#34;&gt;a more useful endpoint&lt;/a&gt;, making several sub-calls to other cells in the process. We&amp;rsquo;ve recently found out this pattern &lt;a href=&#34;https://microservices.io/patterns/data/api-composition.html&#34;&gt;has its own name&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;figure&gt;
    

    

    &lt;img
        src=&#34;https://larribas.me/posts/colmena-an-architecture-for-highly-scalable-web-services/images/cell_layers.png&#34;
        alt=&#34;In the hexagonal architecture, a cell has several layers. The outmost layer is the framework layer, where we interface with specific tools, services or libraries. Beneath it is the aplication layer, where we expose all public-facing features (commands, queries and listeners in our case). Beneath the application is the domain.&#34;
        
    &gt;

    

    &lt;figcaption&gt;The layers in the hexagonal architecture, as applied to the concepts in &lt;em&gt;Colmena&lt;/em&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;h2 id=&#34;hence-_colmena_&#34;&gt;Hence, &lt;em&gt;Colmena&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;We felt it was better to start explaining this architecture from the bottom up, so we haven&amp;rsquo;t had the time to explain properly what the heck a &lt;em&gt;Colmena&lt;/em&gt; is.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Colmena&lt;/em&gt; means Beehive in Spanish. Like our architecture, :bee:-hives are composed of many small hexagonal units that are isolated from one another but work together as a powerful system. Isn&amp;rsquo;t that beautiful?&lt;/p&gt;
&lt;p&gt;Hence, the name.&lt;/p&gt;


&lt;figure&gt;
    

    

    &lt;img
        src=&#34;https://larribas.me/posts/colmena-an-architecture-for-highly-scalable-web-services/images/beehive.jpg&#34;
        alt=&#34;A beehive is made up of many hexagonal cells that work together&#34;
        
    &gt;

    

    
&lt;/figure&gt;


&lt;hr&gt;
&lt;p&gt;&lt;em&gt;In this article, we&amp;rsquo;ve presented an overview of the Colmena architecture and the reasons that brought us to use it in the first place.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In the next ones, we&amp;rsquo;ll zoom into some of the main features and provide more details and code examples.&lt;/em&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;By what we mean, do a lot of research and combine the ideas we liked the most with our own use cases &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;The example app is written in Ruby, but we&amp;rsquo;ve applied the same ideas to codebases in Go and Haskell, with the same effects. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Just remember to &lt;strong&gt;test every adapter&lt;/strong&gt; before releasing to production, not just the ones you use for your development environment. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
      
      <category>architecture</category>
      
      <category>design-patterns</category>
      
      <category>event-sourcing</category>
      
      <category>cqrs</category>
      
      <category>microservices</category>
      
      <category>web-services</category>
      
    </item>
    
    <item>
      <title>Colmena</title>
      <subtitle>Colmena is an architectural pattern oriented towards long-term maintainability and scalability.</subtitle>
      <link>https://larribas.me/projects/colmena/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://larribas.me/projects/colmena/</guid>
      <description>&lt;p&gt;Around 2015, &lt;a href=&#34;https://github.com/hecrj&#34;&gt;@hecrj&lt;/a&gt; and I were having serious trouble maintaining a &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt; codebase we had started &lt;em&gt;just one year ago!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We knew we were doing something wrong, and we had serious doubts about MVC as a healthy, long-term architecture for complex applications.&lt;/p&gt;
&lt;p&gt;After doing some research and debating a few ideas, we decided to ditch frameworks and experiment with our own system, drawing inspiration from many other patterns we liked, such as the Hexagonal Architecture, Event Sourcing, CQRS, Domain-Driven Design.&lt;/p&gt;
&lt;p&gt;What came out of this process was an architecture we called &lt;em&gt;Colmena&lt;/em&gt; (Beehive in Spanish), because it was composed of many small cells that used the hexagonal architecture.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve written a few articles introducing this architecture and the ideas it champions. You can find them in &lt;a href=&#34;https://larribas.me/posts/&#34;&gt;my blog&lt;/a&gt; and &lt;a href=&#34;https://dev.to/hecrj&#34;&gt;hecrj&amp;rsquo;s&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve also published a &lt;a href=&#34;https://github.com/schoolhouse-io/colmena-realworld-example-app&#34;&gt;RealWorld API example&lt;/a&gt; in Ruby to showcase these ideas in a real context.&lt;/p&gt;


&lt;figure&gt;
    

    

    &lt;img
        src=&#34;https://larribas.me/projects/colmena/images/beehive.jpg&#34;
        alt=&#34;Beehive&#34;
        
    &gt;

    

    
&lt;/figure&gt;


</description>
      
      <category>hexagonal-architecture</category>
      
      <category>event-sourcing</category>
      
      <category>domain-driven-design</category>
      
      <category>cqrs</category>
      
    </item>
    
  </channel>
</rss>
