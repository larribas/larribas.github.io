<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Lorenzo Arribas</title>
    <link>https://larribas.me/tags/architecture/</link>
    <description>Recent content in Architecture on Lorenzo Arribas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://larribas.me/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Colmena, an Architecture for Highly-Scalable Web Services</title>
      <link>https://larribas.me/posts/colmena-an-architecture-for-highly-scalable-web-services/</link>
      <pubDate>Tue, 06 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://larribas.me/posts/colmena-an-architecture-for-highly-scalable-web-services/</guid>
      <description>About 3 years ago, our startup pivoted from a Q&amp;amp;A app for doctors to an education platform (which we named SchoolHouse.io). It was a big product shift, and we knew many technical changes would follow.
At the time, we had a 1-year-old Python+Django codebase that was already getting rusty and hard to maintain. How did we cross the legacy line so fast?
(sigh)
We were clearly doing something wrong, and we wanted to understand what, so we made a list of our main painpoints:</description>
    </item>
    
    <item>
      <title>5 ways to make your codebase withstand the test of time</title>
      <link>https://larribas.me/posts/5-ways-to-make-your-codebase-withstand-the-test-of-time/</link>
      <pubDate>Wed, 17 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://larribas.me/posts/5-ways-to-make-your-codebase-withstand-the-test-of-time/</guid>
      <description>This is the first in a series of articles where @hecrj and I share what we have learned after working on a large, fast-changing codebase for the past 3 years, and being perfectly happy with the result!
If you are a web developer, you are probably used to having new frameworks, libraries and technologies come out every other week.
 We are on a never-ending quest to find better tools and patterns, but does that mean our code is doomed to become old and wrinkly?</description>
    </item>
    
  </channel>
</rss>