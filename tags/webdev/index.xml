<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Webdev on Lorenzo Arribas</title>
    <link>https://larribas.me/tags/webdev/</link>
    <description>Recent content in Webdev on Lorenzo Arribas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://larribas.me/tags/webdev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>5 ways to make your codebase withstand the test of time</title>
      <link>https://larribas.me/posts/5-ways-to-make-your-codebase-withstand-the-test-of-time/</link>
      <pubDate>Wed, 17 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://larribas.me/posts/5-ways-to-make-your-codebase-withstand-the-test-of-time/</guid>
      <description>This is the first in a series of articles where @hecrj and I share what we have learned after working on a large, fast-changing codebase for the past 3 years, and being perfectly happy with the result!
If you are a web developer, you are probably used to having new frameworks, libraries and technologies come out every other week.
 We are on a never-ending quest to find better tools and patterns, but does that mean our code is doomed to become old and wrinkly?</description>
    </item>
    
  </channel>
</rss>